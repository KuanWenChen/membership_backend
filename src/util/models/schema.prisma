// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/util/models"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  /// To clip different system account
  domain    Int      @default(0) @db.UnsignedSmallInt
  /// user account
  account   String   @db.VarChar(50)
  password  String   @db.VarChar(128)
  salt      String   @db.VarChar(12)
  /// register account type, 0 is this system, 1 is third_part from google and so on...
  type      Int      @default(0) @db.UnsignedSmallInt
  /// status code for user, 0: registered, 1: verify account, 2: archived and so on....
  status    Int      @default(0) @db.UnsignedSmallInt
  /// register time
  createdAt DateTime @default(now())

  userInfo    UserInfo?
  LoginRecord LoginRecord[]
  UserVerify  UserVerify[]

  @@unique([domain, account])
}

/// save User basic information
model UserInfo {
  /// User id
  userId Int     @id
  /// user name
  name   String? @db.VarChar(50)
  /// bind email, could use for forgot password and so on... is it verifed to see User.status
  email  String? @db.VarChar(320)
  /// Customization data
  custom Json    @default("{}")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

/// user verify code or another verify info
model UserVerify {
  id        Int      @id @default(autoincrement())
  /// User id
  userId    Int
  /// verify info type, 0: login, 1: email and so on...
  type      Int      @db.UnsignedSmallInt
  /// code status, 0: usable, 1: disable and so on...
  status    Int      @db.UnsignedSmallInt
  /// verify code
  code      String   @db.VarChar(12)
  /// code expired time
  expiredAt DateTime
  /// code created time
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

/// user login record, create only.
model LoginRecord {
  id        Int      @id @default(autoincrement())
  userId    Int
  /// status code 0: succeed, 1: failed and so on....
  code      Int      @db.UnsignedSmallInt
  /// record created At, it is often crated at loging
  createdAt DateTime @default(now())

  user User @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

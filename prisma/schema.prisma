generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id          Int              @id @default(autoincrement()) @db.UnsignedInt
  /// To clip different system account
  domain      USER_ENUM_DOMAIN @default(MEMBERSHIP)
  /// user account
  account     String           @db.VarChar(50)
  password    String           @db.VarChar(128)
  salt        String           @db.VarChar(12)
  /// register account type
  type        USER_ENUM_TYPE   @default(MEMBERSHIP)
  /// status code for user
  status      USER_ENUM_STATUS @default(REGISTERED)
  /// register time
  createdAt   DateTime         @default(now())
  LoginRecord LoginRecord?
  userInfo    UserInfo?
  UserVerify  UserVerify[]

  @@unique([domain, account])
}

enum USER_ENUM_DOMAIN {
  MEMBERSHIP
}

enum USER_ENUM_TYPE {
  MEMBERSHIP
}

enum USER_ENUM_STATUS {
  REGISTERED
  VERIFY_ACCOUNT
}

/// save User basic information
model UserInfo {
  /// User id
  userId Int     @id @db.UnsignedInt
  /// user name
  name   String? @db.VarChar(50)
  /// bind email, could use for forgot password and so on... is it verifed to see User.status
  email  String? @db.VarChar(320)
  /// Customization data
  custom Json
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// user verify code or another verify info
model UserVerify {
  id        Int                @id @default(autoincrement()) @db.UnsignedInt
  /// User id
  userId    Int                @db.UnsignedInt
  /// verify info type
  type      USER_VERIFY_TYPE
  /// code status, 0: usable, 1: disable and so on...
  status    USER_VERIFY_STATUS
  /// verify code
  code      String             @db.VarChar(12)
  /// code expired time
  expiredAt DateTime
  /// code created time
  createdAt DateTime           @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum USER_VERIFY_TYPE {
  LOGIN
  EMAIL
}

enum USER_VERIFY_STATUS {
  USABLE
  DISABLE
}

/// user login record, create only.
model LoginRecord {
  id        Int                    @id @default(autoincrement()) @db.UnsignedInt
  userId    Int                    @db.UnsignedInt
  /// status code
  code      LOGIN_RECORD_ENUM_CODE
  /// record created At, it is often crated at loging
  createdAt DateTime               @default(now())
  user      User                   @relation(fields: [id], references: [id], onDelete: Cascade)
}

enum LOGIN_RECORD_ENUM_CODE {
  SUCCEED
  FAILED
}
